import MetaTrader5 as mt5
import pandas as pd
import time
from datetime import datetime
from dotenv import load_dotenv
import os

# Load config
load_dotenv()
SERVER = os.getenv("MT5_SERVER")
LOGIN = int(os.getenv("MT5_LOGIN"))
PASSWORD = os.getenv("MT5_PASSWORD")
LOT_SIZE = float(os.getenv("LOT_SIZE"))
TP1 = int(os.getenv("TP1_PIPS"))
TP2 = int(os.getenv("TP2_PIPS"))
SL = int(os.getenv("SL_PIPS"))

# Pairs to trade
PAIRS = ["GBPUSD", "XAUUSD", "EURUSD"]

def connect_mt5():
    if not mt5.initialize(server=SERVER, login=LOGIN, password=PASSWORD):
        print("MT5 Login Failed!")
        return False
    print("MT5 Connected!")
    return True

def get_balance():
    return mt5.account_info().balance

def log_trade(pair, ticket, entry_time, entry_price, exit_price, exit_time, pnl, hit_tp_sl):
    log_data = {
        "Time_Entry": entry_time,
        "Time_Exit": exit_time,
        "Pair": pair,
        "Ticket": ticket,
        "Entry_Price": entry_price,
        "Exit_Price": exit_price,
        "PnL": pnl,
        "TP/SL_Hit": hit_tp_sl,
        "Balance": get_balance()
    }
    df = pd.DataFrame([log_data])
    df.to_csv("trade_log.csv", mode='a', header=not os.path.exists("trade_log.csv"), index=False)

def check_entry(pair):
    bars = mt5.copy_rates_from_pos(pair, mt5.TIMEFRAME_M5, 0, 20)
    if bars is None or len(bars) == 0:
        print(f"[{pair}] ‚ùå No bars data.")
        return None

    df = pd.DataFrame(bars)
    recent_low, recent_high = df['low'].min(), df['high'].max()
    last_close = df['close'].iloc[-1]

    print(f"[{pair}] Close: {last_close:.5f}, Low: {recent_low:.5f}, High: {recent_high:.5f}")

    if last_close <= recent_low * 1.001:
        print(f"[{pair}] üìà BUY Signal")
        return "buy"
    elif last_close >= recent_high * 0.999:
        print(f"[{pair}] üìâ SELL Signal")
        return "sell"
    return None

def place_trade(pair, signal):
    symbol_info = mt5.symbol_info(pair)
    if signal == "buy":
        order_type = mt5.ORDER_TYPE_BUY
        price = mt5.symbol_info_tick(pair).ask
        sl = price - SL * 10 * symbol_info.point
        tp1 = price + TP1 * 10 * symbol_info.point
        tp2 = price + TP2 * 10 * symbol_info.point
    else:  # sell
        order_type = mt5.ORDER_TYPE_SELL
        price = mt5.symbol_info_tick(pair).bid
        sl = price + SL * 10 * symbol_info.point
        tp1 = price - TP1 * 10 * symbol_info.point
        tp2 = price - TP2 * 10 * symbol_info.point

    # Open 2 positions
    tickets = []
    for _ in range(2):
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": pair,
            "volume": LOT_SIZE,
            "type": order_type,
            "price": price,
            "sl": sl,
            "tp": tp1,  # TP1 for both (we'll manually adjust TP2 later)
            "deviation": 10,
            "magic": 123456,
            "comment": f"ScalpBot_{signal}",
        }
        trade = mt5.order_send(request)
        if trade.retcode == mt5.TRADE_RETCODE_DONE:
            tickets.append(trade.order)
            print(f"Opened {signal} {pair} | Ticket: {trade.order}")
    return tickets

def track_trades():
    open_trades = mt5.positions_get()
    for trade in open_trades:
        current_price = mt5.symbol_info_tick(trade.symbol).ask if trade.type == mt5.ORDER_TYPE_BUY else mt5.symbol_info_tick(trade.symbol).bid
        pnl = trade.profit

        # Check if TP2 or SL hit
        if (trade.type == mt5.ORDER_TYPE_BUY and current_price >= trade.tp + (TP2 - TP1) * 10 * mt5.symbol_info(trade.symbol).point) or \
           (trade.type == mt5.ORDER_TYPE_SELL and current_price <= trade.tp - (TP2 - TP1) * 10 * mt5.symbol_info(trade.symbol).point):
            hit = "TP2"
        elif (trade.type == mt5.ORDER_TYPE_BUY and current_price <= trade.sl) or (trade.type == mt5.ORDER_TYPE_SELL and current_price >= trade.sl):
            hit = "SL"
        else:
            hit = None

        if hit:
            close_request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": trade.symbol,
                "volume": trade.volume,
                "type": mt5.ORDER_TYPE_BUY if trade.type == mt5.ORDER_TYPE_SELL else mt5.ORDER_TYPE_SELL,
                "position": trade.ticket,
                "price": current_price,
                "deviation": 10,
            }
            mt5.order_send(close_request)
            #log_trade(trade.symbol, trade.ticket, trade.time_open, trade.price_open, current_price, datetime.now(), pnl, hit)
            #log_trade(trade.symbol, trade.ticket, trade.time, trade.price_open, current_price, datetime.now(), pnl, hit)            

            opened_time = datetime.fromtimestamp(trade.time)
            log_trade(trade.symbol, trade.ticket, opened_time, trade.price_open, current_price, datetime.now(), pnl, hit)

def main():
    if not connect_mt5():
        return

    print(f"Starting Scalper Bot | Balance: ${get_balance():.2f}")
    while True:
        for pair in PAIRS:
            signal = check_entry(pair)
            if signal:
                place_trade(pair, signal)
        track_trades()
        time.sleep(10)

if __name__ == "__main__":
    main()